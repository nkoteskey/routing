var searchIndex={};
searchIndex["routing"] = {"doc":"P2PNode implementation for a resilient decentralised…","i":[[3,"TransportConfig","routing","QuicP2p configurations",null,null],[12,"hard_coded_contacts","","Hard Coded contacts",0,null],[12,"port","","Port we want to reserve for QUIC. If none supplied we'll…",0,null],[12,"ip","","IP address for the listener. If none supplied we'll use…",0,null],[12,"max_msg_size_allowed","","This is the maximum message size we'll allow the peer to…",0,null],[12,"idle_timeout_msec","","If we hear nothing from the peer in the given interval we…",0,null],[12,"keep_alive_interval_msec","","Interval to send keep-alives if we are idling so that the…",0,null],[12,"bootstrap_cache_dir","","Directory in which the bootstrap cache will be stored. If…",0,null],[12,"upnp_lease_duration","","Duration of a UPnP port mapping.",0,null],[12,"our_type","","Specify if we are a client or a node",0,null],[4,"TransportEvent","","QuicP2p Events to the user",null,null],[13,"BootstrapFailure","","Network bootstrap failed.",1,null],[13,"BootstrappedTo","","Bootstrap connection to this node was successful.",1,null],[12,"node","routing::TransportEvent","Node information.",2,null],[13,"ConnectionFailure","routing","Connection to this peer failed.",1,null],[12,"peer","routing::TransportEvent","Peer.",3,null],[12,"err","","Error explaining connection failure.",3,null],[13,"SentUserMessage","routing","The given message was successfully sent to this peer.",1,null],[12,"peer","routing::TransportEvent","Peer.",4,null],[12,"msg","","Sent message.",4,null],[12,"token","","Token, originally given by the user, for context.",4,null],[13,"UnsentUserMessage","routing","The given message was not sent to this peer.",1,null],[12,"peer","routing::TransportEvent","Peer.",5,null],[12,"msg","","Unsent message.",5,null],[12,"token","","Token, originally given by the user, for context.",5,null],[13,"ConnectedTo","routing","Successfully connected to this peer.",1,null],[12,"peer","routing::TransportEvent","Peer information.",6,null],[13,"NewMessage","routing","A new message was received from this peer.",1,null],[12,"peer","routing::TransportEvent","Sending peer.",7,null],[12,"msg","","The new message.",7,null],[13,"Finish","routing","No more messages will be fired after this",1,null],[3,"FullId","","Network identity component containing name, and public and…",null,null],[3,"P2pNode","","Network p2p node identity. When a node knows another node…",null,null],[3,"PublicId","","Network identity component containing name and public keys.",null,null],[3,"Node","","Interface for sending and receiving messages to and from…",null,null],[3,"NodeConfig","","Node configuration.",null,null],[12,"first","","If true, configures the node to start a new network…",8,null],[12,"full_id","","The ID of the node or `None` for randomly generated one.",8,null],[12,"transport_config","","Configuration for the underlying network transport.",8,null],[12,"network_params","","Global network parameters. Must be identical for all nodes…",8,null],[12,"rng","","Random number generator to be used by the node. Can be…",8,null],[3,"PausedState","","A type that wraps the internal state of a node while it is…",null,null],[3,"Prefix","","A section prefix, i.e. a sequence of bits specifying the…",null,null],[3,"XorName","","A `XOR_NAME_BITS`-bit number, viewed as a point in XOR…",null,null],[12,"0","","",9,null],[4,"RoutingError","","Internal error.",null,null],[13,"BadLocation","","",10,null],[13,"FailedSignature","","",10,null],[13,"CannotRoute","","",10,null],[13,"Network","","",10,null],[13,"InvalidState","","",10,null],[13,"Bincode","","",10,null],[13,"PeerNotFound","","",10,null],[13,"InvalidSource","","",10,null],[13,"InvalidMessage","","",10,null],[13,"InvalidProvingSection","","",10,null],[13,"UntrustedMessage","","",10,null],[13,"InvalidNewSectionInfo","","",10,null],[13,"InvalidRelocation","","",10,null],[13,"InvalidElderDkgResult","","",10,null],[13,"ChannelRecvError","","",10,null],[4,"DstLocation","","Message destination location.",null,null],[13,"Node","","Destination is a single node with the given name.",11,null],[13,"Section","","Destination are the nodes of the section whose prefix…",11,null],[13,"Direct","","Destination is the node at the `ConnectionInfo` the…",11,null],[4,"SrcLocation","","Message source location.",null,null],[13,"Node","","A single node with the given name.",12,null],[13,"Section","","A section with the given prefix.",12,null],[0,"event","","Routing events.",null,null],[4,"Connected","routing::event","An Event raised as node complete joining",null,null],[13,"First","","Node first joining the network",13,null],[13,"Relocate","","Node relocating from one section to another",13,null],[4,"Event","","An Event raised by a `Node` or `Client` via its event…",null,null],[13,"Connected","","The node has successfully connected to the network.",14,null],[13,"MessageReceived","","Received a message.",14,null],[12,"content","routing::event::Event","The content of the message.",15,null],[12,"src","","The source location that sent the message.",15,null],[12,"dst","","The destination location that receives the message.",15,null],[13,"Consensus","routing::event","Consensus on a custom event.",14,null],[13,"Promoted","","The node has been promoted to elder",14,null],[13,"Demoted","","The node has been demoted from elder",14,null],[13,"MemberJoined","","A node joined our section.",14,null],[12,"name","routing::event::Event","Name of the node",16,null],[12,"age","","Age of the node",16,null],[13,"MemberLeft","routing::event","A node left our section.",14,null],[12,"name","routing::event::Event","Name of the node",17,null],[12,"age","","Age of the node",17,null],[13,"EldersChanged","routing::event","The set of elders in our section has changed.",14,null],[12,"prefix","routing::event::Event","The prefix of our section.",18,null],[12,"key","","The BLS public key of our section.",18,null],[12,"elders","","The set of elders of our section.",18,null],[13,"RestartRequired","routing::event","Disconnected or failed to connect - restart required.",14,null],[13,"Terminated","","Startup failed - terminate.",14,null],[11,"gen","routing","Construct a `FullId` with randomly generated keys.",19,[[["mainrng"]],["self"]]],[11,"within_range","","Construct a `FullId` whose name is in the interval [start,…",19,[[["mainrng"],["rangeinclusive"]],["self"]]],[11,"public_id","","Returns public ID reference.",19,[[["self"]],["publicid"]]],[11,"public_id_mut","","Returns mutable reference to public ID.",19,[[["self"]],["publicid"]]],[11,"sign","","Sign a message.",19,[[["self"]],["signature"]]],[11,"name","","Returns initial/relocated name.",20,[[["self"]],["xorname"]]],[11,"verify","","Verifies this id signed a message",20,[[["self"],["signature"]],["bool"]]],[11,"public_signing_key","","Returns public signing key.",20,[[["self"]],["publickey"]]],[11,"public_encryption_key","","Returns public encryption key.",20,[[["self"]],["publickey"]]],[11,"new","","Creates a new `P2pNode` given a `PublicId` and a…",21,[[["publicid"],["socketaddr"]],["self"]]],[11,"public_id","","Returns the `PublicId`.",21,[[["self"]],["publicid"]]],[11,"name","","Returns the `XorName` of the underlying `PublicId`.",21,[[["self"]],["xorname"]]],[11,"peer_addr","","Returns the `SocketAddr`.",21,[[["self"]],["socketaddr"]]],[11,"is_section","","Returns whether this location is a section.",12,[[["self"]],["bool"]]],[11,"is_section","","Returns whether this location is a section.",11,[[["self"]],["bool"]]],[11,"new","","Create new node using the given config.",22,[[["nodeconfig"]]]],[11,"pause","","Pauses the node in order to be upgraded and/or restarted.…",22,[[],[["result",["pausedstate","routingerror"]],["pausedstate"],["routingerror"]]]],[11,"resume","","Resume previously paused node.",22,[[["pausedstate"]]]],[11,"register","","Register the node event channels with the provided selector.",22,[[["self"],["select"]]]],[11,"handle_selected_operation","","Processes events received externally from one of the…",22,[[["self"],["usize"]],[["result",["recverror"]],["recverror"]]]],[11,"is_running","","Returns whether this node is running or has been terminated.",22,[[["self"]],["bool"]]],[11,"id","","Returns the `PublicId` of this node.",22,[[["self"]],["publicid"]]],[11,"name","","The name of this node.",22,[[["self"]],["xorname"]]],[11,"our_connection_info","","Returns connection info of this node.",22,[[["self"]],[["result",["socketaddr","routingerror"]],["routingerror"],["socketaddr"]]]],[11,"our_prefix","","Our `Prefix` once we are a part of the section.",22,[[["self"]],[["option",["prefix"]],["prefix"]]]],[11,"matches_our_prefix","","Finds out if the given XorName matches our prefix. Returns…",22,[[["xorname"],["self"]],[["result",["bool","routingerror"]],["routingerror"],["bool"]]]],[11,"is_elder","","Returns whether the node is Elder.",22,[[["self"]],["bool"]]],[11,"our_elders","","Returns the information of all the current section elders.",22,[[["self"]]]],[11,"closest_known_elders_to","","Find out the closest Elders to a given XorName that we…",22,[[["self"],["xorname"]]]],[11,"our_adults","","Returns the information of all the current section adults.",22,[[["self"]]]],[11,"our_adults_sorted_by_distance_to","","Returns the adults of our section sorted by their distance…",22,[[["xorname"],["self"]],[["p2pnode"],["vec",["p2pnode"]]]]],[11,"in_dst_location","","Checks whether the given location represents self.",22,[[["self"],["dstlocation"]],["bool"]]],[11,"vote_for_user_event","","Vote for a user-defined event. Returns `InvalidState`…",22,[[["self"],["vec",["u8"]],["u8"]],[["result",["routingerror"]],["routingerror"]]]],[11,"send_message","","Send a message.",22,[[["dstlocation"],["u8"],["self"],["srclocation"],["vec",["u8"]]],[["result",["routingerror"]],["routingerror"]]]],[11,"send_message_to_client","","Send a message to a client peer.",22,[[["token"],["socketaddr"],["self"],["bytes"]],[["result",["routingerror"]],["routingerror"]]]],[11,"disconnect_from_client","","Disconnect form a client peer.",22,[[["self"],["socketaddr"]],[["result",["routingerror"]],["routingerror"]]]],[11,"public_key_set","","Returns the current BLS public key set or…",22,[[["self"]],[["result",["publickeyset","routingerror"]],["publickeyset"],["routingerror"]]]],[11,"secret_key_share","","Returns the current BLS secret key share or…",22,[[["self"]],[["secretkeyshare"],["routingerror"],["result",["secretkeyshare","routingerror"]]]]],[11,"new","","Creates a new `Prefix` with the first `bit_count` bits of…",23,[[["usize"],["t"]],["prefix"]]],[11,"name","","Returns the name of this prefix.",23,[[["self"]],["t"]]],[11,"pushed","","Returns `self` with an appended bit: `0` if `bit` is…",23,[[["bool"]],["prefix"]]],[11,"popped","","Returns a prefix copying the first `bitcount() - 1` bits…",23,[[],["prefix"]]],[11,"bit_count","","Returns the number of bits in the prefix.",23,[[["self"]],["usize"]]],[11,"is_empty","","Returns `true` if this is the empty prefix, with no bits.",23,[[["self"]],["bool"]]],[11,"is_compatible","","Returns `true` if `self` is a prefix of `other` or vice…",23,[[["prefix"],["self"]],["bool"]]],[11,"is_extension_of","","Returns `true` if `other` is compatible but strictly…",23,[[["prefix"],["self"]],["bool"]]],[11,"is_neighbour","","Returns `true` if the `other` prefix differs in exactly…",23,[[["prefix"],["self"]],["bool"]]],[11,"common_prefix","","Returns the number of common leading bits with the input…",23,[[["t"],["self"]],["usize"]]],[11,"matches","","Returns `true` if this is a prefix of the given `name`.",23,[[["t"],["self"]],["bool"]]],[11,"cmp_distance","","Compares the distance of `self` and `other` to `target`.…",23,[[["t"],["self"]],["ordering"]]],[11,"cmp_breadth_first","","Compares the prefixes using breadth-first order. That is,…",23,[[["self"]],["ordering"]]],[11,"lower_bound","","Returns the smallest name matching the prefix",23,[[["self"]],["t"]]],[11,"upper_bound","","Returns the largest name matching the prefix",23,[[["self"]],["t"]]],[11,"range_inclusive","","Inclusive range from lower_bound to upper_bound",23,[[["self"]],["rangeinclusive"]]],[11,"is_covered_by","","Returns whether the namespace defined by `self` is covered…",23,[[["u"],["self"]],["bool"]]],[11,"with_flipped_bit","","Returns the neighbouring prefix differing in the `i`-th…",23,[[["self"],["usize"]],["prefix"]]],[11,"substituted_in","","Returns the given `name` with first bits replaced by `self`",23,[[["self"],["t"]],["t"]]],[11,"sibling","","Returns the same prefix, with the last bit flipped, or…",23,[[["self"]],["prefix"]]],[11,"ancestor","","Returns the ancestors of this prefix that has the given…",23,[[["self"],["usize"]],["prefix"]]],[11,"ancestors","","Returns an iterator that yields all ancestors of this…",23,[[["self"]],["ancestors"]]],[11,"to_hex","","Hex-encode the `XorName` as a `String`.",9,[[["self"]],["string"]]],[11,"count_differing_bits","","Returns the number of bits in which `self` differs from…",9,[[["self"]],["u32"]]],[11,"from_hex","","Hex-decode a `XorName` from a `&str`.",9,[[["str"]],[["xornamefromhexerror"],["result",["xornamefromhexerror"]]]]],[11,"closer","","Returns true if `lhs` is closer to `self` than `rhs`.",9,[[["self"]],["bool"]]],[11,"closer_or_equal","","Returns true if `lhs` is closer to `self` than `rhs`, or…",9,[[["self"]],["bool"]]],[17,"XOR_NAME_LEN","","Constant byte length of `XorName`.",null,null],[14,"log","","Log a message at the given level prefixed with the current…",null,null],[14,"error","","Log a message at the error level prefixed with the current…",null,null],[14,"warn","","Log a message at the warn level prefixed with the current…",null,null],[14,"info","","Log a message at the info level prefixed with the current…",null,null],[14,"debug","","Log a message at the debug level prefixed with the current…",null,null],[14,"trace","","Log a message at the trace level prefixed with the current…",null,null],[14,"log_or_panic","","This macro will panic with the given message if compiled…",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"clone_any","","",0,[[["self"]],[["cloneany"],["box",["cloneany"]]]]],[11,"clone_any_send","","",0,[[["self"]],[["cloneany"],["box",["cloneany"]]]]],[11,"clone_any_sync","","",0,[[["self"]],[["cloneany"],["box",["cloneany"]]]]],[11,"clone_any_send_sync","","",0,[[["self"]],[["box",["cloneany"]],["cloneany"]]]],[11,"vzip","","",0,[[],["v"]]],[11,"clear","","",0,[[["self"]]]],[11,"initialize","","",0,[[]]],[11,"equivalent","","",0,[[["k"],["self"]],["bool"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,[[["self"],["t"]]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"clone_any","","",19,[[["self"]],[["cloneany"],["box",["cloneany"]]]]],[11,"clone_any_send","","",19,[[["self"]],[["cloneany"],["box",["cloneany"]]]]],[11,"clone_any_sync","","",19,[[["self"]],[["cloneany"],["box",["cloneany"]]]]],[11,"clone_any_send_sync","","",19,[[["self"]],[["box",["cloneany"]],["cloneany"]]]],[11,"vzip","","",19,[[],["v"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,[[["self"],["t"]]]],[11,"to_string","","",21,[[["self"]],["string"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"clone_any","","",21,[[["self"]],[["cloneany"],["box",["cloneany"]]]]],[11,"clone_any_send","","",21,[[["self"]],[["cloneany"],["box",["cloneany"]]]]],[11,"clone_any_sync","","",21,[[["self"]],[["cloneany"],["box",["cloneany"]]]]],[11,"clone_any_send_sync","","",21,[[["self"]],[["box",["cloneany"]],["cloneany"]]]],[11,"vzip","","",21,[[],["v"]]],[11,"equivalent","","",21,[[["k"],["self"]],["bool"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,[[["self"],["t"]]]],[11,"to_string","","",20,[[["self"]],["string"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"clone_any","","",20,[[["self"]],[["cloneany"],["box",["cloneany"]]]]],[11,"clone_any_send","","",20,[[["self"]],[["cloneany"],["box",["cloneany"]]]]],[11,"clone_any_sync","","",20,[[["self"]],[["cloneany"],["box",["cloneany"]]]]],[11,"clone_any_send_sync","","",20,[[["self"]],[["box",["cloneany"]],["cloneany"]]]],[11,"vzip","","",20,[[],["v"]]],[11,"equivalent","","",20,[[["k"],["self"]],["bool"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"vzip","","",22,[[],["v"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"vzip","","",8,[[],["v"]]],[11,"clear","","",8,[[["self"]]]],[11,"initialize","","",8,[[]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"vzip","","",24,[[],["v"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,[[["self"],["t"]]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"clone_any","","",23,[[["self"]],[["cloneany"],["box",["cloneany"]]]]],[11,"clone_any_send","","",23,[[["self"]],[["cloneany"],["box",["cloneany"]]]]],[11,"clone_any_sync","","",23,[[["self"]],[["cloneany"],["box",["cloneany"]]]]],[11,"clone_any_send_sync","","",23,[[["self"]],[["box",["cloneany"]],["cloneany"]]]],[11,"vzip","","",23,[[],["v"]]],[11,"clear","","",23,[[["self"]]]],[11,"initialize","","",23,[[]]],[11,"equivalent","","",23,[[["k"],["self"]],["bool"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"to_string","","",9,[[["self"]],["string"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"clone_any","","",9,[[["self"]],[["cloneany"],["box",["cloneany"]]]]],[11,"clone_any_send","","",9,[[["self"]],[["cloneany"],["box",["cloneany"]]]]],[11,"clone_any_sync","","",9,[[["self"]],[["cloneany"],["box",["cloneany"]]]]],[11,"clone_any_send_sync","","",9,[[["self"]],[["box",["cloneany"]],["cloneany"]]]],[11,"vzip","","",9,[[],["v"]]],[11,"clear","","",9,[[["self"]]]],[11,"initialize","","",9,[[]]],[11,"equivalent","","",9,[[["k"],["self"]],["bool"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_string","","",10,[[["self"]],["string"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"as_fail","","",10,[[["self"]],["fail"]]],[11,"vzip","","",10,[[],["v"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"clone_any","","",11,[[["self"]],[["cloneany"],["box",["cloneany"]]]]],[11,"clone_any_send","","",11,[[["self"]],[["cloneany"],["box",["cloneany"]]]]],[11,"clone_any_sync","","",11,[[["self"]],[["cloneany"],["box",["cloneany"]]]]],[11,"clone_any_send_sync","","",11,[[["self"]],[["box",["cloneany"]],["cloneany"]]]],[11,"vzip","","",11,[[],["v"]]],[11,"equivalent","","",11,[[["k"],["self"]],["bool"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"clone_any","","",12,[[["self"]],[["cloneany"],["box",["cloneany"]]]]],[11,"clone_any_send","","",12,[[["self"]],[["cloneany"],["box",["cloneany"]]]]],[11,"clone_any_sync","","",12,[[["self"]],[["cloneany"],["box",["cloneany"]]]]],[11,"clone_any_send_sync","","",12,[[["self"]],[["box",["cloneany"]],["cloneany"]]]],[11,"vzip","","",12,[[],["v"]]],[11,"equivalent","","",12,[[["k"],["self"]],["bool"]]],[11,"from","routing::event","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"clone_any","","",13,[[["self"]],[["cloneany"],["box",["cloneany"]]]]],[11,"clone_any_send","","",13,[[["self"]],[["cloneany"],["box",["cloneany"]]]]],[11,"clone_any_sync","","",13,[[["self"]],[["cloneany"],["box",["cloneany"]]]]],[11,"clone_any_send_sync","","",13,[[["self"]],[["box",["cloneany"]],["cloneany"]]]],[11,"vzip","","",13,[[],["v"]]],[11,"equivalent","","",13,[[["k"],["self"]],["bool"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"clone_any","","",14,[[["self"]],[["cloneany"],["box",["cloneany"]]]]],[11,"clone_any_send","","",14,[[["self"]],[["cloneany"],["box",["cloneany"]]]]],[11,"clone_any_sync","","",14,[[["self"]],[["cloneany"],["box",["cloneany"]]]]],[11,"clone_any_send_sync","","",14,[[["self"]],[["box",["cloneany"]],["cloneany"]]]],[11,"vzip","","",14,[[],["v"]]],[11,"equivalent","","",14,[[["k"],["self"]],["bool"]]],[11,"deserialize","routing","",0,[[["__d"]],[["result",["config"]],["config"]]]],[11,"fmt","","",1,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"clap","","",0,[[],["app"]]],[11,"from_clap","","",0,[[["argmatches"]],["config"]]],[11,"fmt","","",1,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"clone","","",0,[[["self"]],["config"]]],[11,"eq","","",0,[[["self"],["config"]],["bool"]]],[11,"ne","","",0,[[["self"],["config"]],["bool"]]],[11,"serialize","","",0,[[["self"],["__s"]],["result"]]],[11,"default","","",0,[[],["config"]]],[11,"as_ref","","",20,[[["self"]],["xorname"]]],[11,"as_ref","","",9,[[["self"]],["self"]]],[11,"from","","",10,[[["xorname"]],["routingerror"]]],[11,"from","","",10,[[["recverror"]],["routingerror"]]],[11,"from","","",10,[[["quicp2perror"]],["routingerror"]]],[11,"from","","",10,[[["box",["errorkind"]],["errorkind"]],["routingerror"]]],[11,"clone","routing::event","",13,[[["self"]],["connected"]]],[11,"clone","","",14,[[["self"]],["event"]]],[11,"clone","routing","",19,[[["self"]],["fullid"]]],[11,"clone","","",20,[[["self"]],["publicid"]]],[11,"clone","","",21,[[["self"]],["p2pnode"]]],[11,"clone","","",12,[[["self"]],["srclocation"]]],[11,"clone","","",11,[[["self"]],["dstlocation"]]],[11,"clone","","",23,[[["self"]],["prefix"]]],[11,"clone","","",9,[[["self"]],["xorname"]]],[11,"default","","",8,[[],["self"]]],[11,"default","","",23,[[],["prefix"]]],[11,"default","","",9,[[],["xorname"]]],[11,"cmp","","",20,[[["self"],["publicid"]],["ordering"]]],[11,"cmp","","",21,[[["self"],["p2pnode"]],["ordering"]]],[11,"cmp","","",23,[[["self"]],["ordering"]]],[11,"cmp","","",9,[[["xorname"],["self"]],["ordering"]]],[11,"eq","routing::event","",13,[[["connected"],["self"]],["bool"]]],[11,"eq","","",14,[[["event"],["self"]],["bool"]]],[11,"ne","","",14,[[["event"],["self"]],["bool"]]],[11,"eq","routing","",20,[[["self"],["publicid"]],["bool"]]],[11,"ne","","",20,[[["self"],["publicid"]],["bool"]]],[11,"eq","","",21,[[["self"],["p2pnode"]],["bool"]]],[11,"ne","","",21,[[["self"],["p2pnode"]],["bool"]]],[11,"eq","","",12,[[["self"],["srclocation"]],["bool"]]],[11,"ne","","",12,[[["self"],["srclocation"]],["bool"]]],[11,"eq","","",11,[[["self"],["dstlocation"]],["bool"]]],[11,"ne","","",11,[[["self"],["dstlocation"]],["bool"]]],[11,"eq","","",23,[[["self"]],["bool"]]],[11,"eq","","",9,[[["xorname"],["self"]],["bool"]]],[11,"ne","","",9,[[["xorname"],["self"]],["bool"]]],[11,"partial_cmp","","",20,[[["self"],["publicid"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",20,[[["self"],["publicid"]],["bool"]]],[11,"le","","",20,[[["self"],["publicid"]],["bool"]]],[11,"gt","","",20,[[["self"],["publicid"]],["bool"]]],[11,"ge","","",20,[[["self"],["publicid"]],["bool"]]],[11,"partial_cmp","","",21,[[["self"],["p2pnode"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",21,[[["self"],["p2pnode"]],["bool"]]],[11,"le","","",21,[[["self"],["p2pnode"]],["bool"]]],[11,"gt","","",21,[[["self"],["p2pnode"]],["bool"]]],[11,"ge","","",21,[[["self"],["p2pnode"]],["bool"]]],[11,"partial_cmp","","",23,[[["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",9,[[["xorname"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",9,[[["xorname"],["self"]],["bool"]]],[11,"le","","",9,[[["xorname"],["self"]],["bool"]]],[11,"gt","","",9,[[["xorname"],["self"]],["bool"]]],[11,"ge","","",9,[[["xorname"],["self"]],["bool"]]],[11,"fmt","routing::event","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","routing","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",20,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",21,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",23,[[["formatter"],["self"]],["fmtresult"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",21,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"div","","",9,[[["u32"]]]],[11,"sub","","",9,[[]]],[11,"not","","",9,[[],["self"]]],[11,"index","","",9,[[["range",["usize"]],["self"],["usize"]]]],[11,"index","","",9,[[["rangeto",["usize"]],["self"],["usize"]]]],[11,"index","","",9,[[["usize"],["self"],["rangefrom",["usize"]]]]],[11,"index","","",9,[[["rangefull"],["self"]]]],[11,"hash","","",20,[[["self"],["__h"]]]],[11,"hash","","",21,[[["self"],["__h"]]]],[11,"hash","","",12,[[["self"],["__h"]]]],[11,"hash","","",11,[[["self"],["__h"]]]],[11,"hash","","",23,[[["self"],["h"]]]],[11,"hash","","",9,[[["self"],["__h"]]]],[11,"fmt","","",23,[[["formatter"],["self"]],["fmtresult"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"description","","",10,[[["self"]],["str"]]],[11,"cause","","",10,[[["self"]],[["error"],["option",["error"]]]]],[11,"source","","",10,[[["self"]],[["error"],["option",["error"]]]]],[11,"serialize","","",20,[[["serializer"],["self"]],["result"]]],[11,"serialize","","",21,[[["self"],["__s"]],["result"]]],[11,"serialize","","",12,[[["self"],["__s"]],["result"]]],[11,"serialize","","",11,[[["self"],["__s"]],["result"]]],[11,"serialize","","",23,[[["self"],["__s"]],["result"]]],[11,"serialize","","",9,[[["self"],["__s"]],["result"]]],[11,"deserialize","","",20,[[["deserializer"]],["result"]]],[11,"deserialize","","",21,[[["__d"]],["result"]]],[11,"deserialize","","",12,[[["__d"]],["result"]]],[11,"deserialize","","",11,[[["__d"]],["result"]]],[11,"deserialize","","",23,[[["__d"]],["result"]]],[11,"deserialize","","",9,[[["__d"]],["result"]]],[11,"verify_signature","","",20,[[["self"]],["bool"]]],[11,"public_id","","",19,[[["self"]]]],[11,"sign_detached","","",19,[[["self"]]]],[11,"encrypt","","",19,[[["asref"],["self"]],[["option",["vec"]],["vec",["u8"]]]]],[11,"decrypt","","",19,[[["self"]],[["option",["vec"]],["vec",["u8"]]]]],[11,"read_or_construct_default","","Try and read the config off the disk first. If such a…",0,[[["dirs"],["option",["dirs"]]],[["config"],["result",["config","quicp2perror"]],["quicp2perror"]]]]],"p":[[3,"TransportConfig"],[4,"TransportEvent"],[13,"BootstrappedTo"],[13,"ConnectionFailure"],[13,"SentUserMessage"],[13,"UnsentUserMessage"],[13,"ConnectedTo"],[13,"NewMessage"],[3,"NodeConfig"],[3,"XorName"],[4,"RoutingError"],[4,"DstLocation"],[4,"SrcLocation"],[4,"Connected"],[4,"Event"],[13,"MessageReceived"],[13,"MemberJoined"],[13,"MemberLeft"],[13,"EldersChanged"],[3,"FullId"],[3,"PublicId"],[3,"P2pNode"],[3,"Node"],[3,"Prefix"],[3,"PausedState"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);